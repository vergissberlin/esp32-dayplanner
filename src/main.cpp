#include <GxEPD.h>
#include <ArduinoJson.h>

// #include <GxGDE0213B72B/GxGDE0213B72B.h>       // 2.13" b/w
#include <GxGDEH0213B73/GxGDEH0213B73.h> // 2.13" b/w newer panel

// 'planner214x45', 214x45px
const unsigned char epd_bitmap_planner214x45[] PROGMEM = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xc0, 0x00, 0x7e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
    0x3e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x1e, 0x0f, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x1e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1,
    0xfc, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xfe, 0x0e, 0x0f, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xfe, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xe7, 0xfd, 0xff, 0xff,
    0xc1, 0xfe, 0x0e, 0x0f, 0xf0, 0x07, 0xf8, 0x20, 0x3f, 0xc1, 0x00, 0xff, 0xf8, 0x07, 0xfc, 0x10,
    0x1f, 0xff, 0xfd, 0xff, 0x3f, 0xfc, 0xff, 0xc7, 0xf9, 0xff, 0xff, 0xc1, 0xfe, 0x0e, 0x0f, 0xc0,
    0x01, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x3f, 0xe0, 0x01, 0xfc, 0x00, 0x1f, 0xff, 0xfc, 0x7f, 0x1f,
    0xfc, 0xff, 0x87, 0xe1, 0xff, 0xff, 0xc1, 0xfe, 0x0e, 0x0f, 0x80, 0x00, 0xf8, 0x00, 0x07, 0xc0,
    0x00, 0x3f, 0xc0, 0x00, 0xfc, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 0x0f, 0xfc, 0xff, 0x07, 0xc1, 0xff,
    0xff, 0xc1, 0xfc, 0x1e, 0x0f, 0x80, 0x00, 0xf8, 0x00, 0x03, 0xc0, 0x00, 0x1f, 0x80, 0x00, 0x7c,
    0x00, 0x3f, 0xff, 0xfc, 0x1f, 0x07, 0xfc, 0xfe, 0x07, 0x81, 0xff, 0xff, 0xc0, 0x00, 0x1e, 0x0f,
    0x87, 0xe0, 0x78, 0x00, 0x03, 0xc0, 0x00, 0x0f, 0x80, 0xf0, 0x3c, 0x00, 0x3f, 0xff, 0xfc, 0x0f,
    0x01, 0xfc, 0xf8, 0x0f, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x3e, 0x0f, 0xdf, 0xf0, 0x78, 0x1f, 0x83,
    0xc0, 0xfc, 0x0f, 0x03, 0xf8, 0x3c, 0x0f, 0xff, 0xff, 0xfe, 0x07, 0x80, 0xfc, 0xf0, 0x1e, 0x07,
    0xff, 0xff, 0xc0, 0x00, 0x3e, 0x0f, 0xff, 0xf0, 0x78, 0x3f, 0xc1, 0xc0, 0xfe, 0x0f, 0x07, 0xfc,
    0x3c, 0x1f, 0xff, 0xff, 0xff, 0x03, 0xc0, 0x7c, 0xe0, 0x7c, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x7e,
    0x0f, 0xfc, 0x00, 0x78, 0x3f, 0xc1, 0xc1, 0xfe, 0x0f, 0x07, 0xfc, 0x1c, 0x1f, 0xff, 0xff, 0xff,
    0x80, 0xf0, 0x3c, 0xc0, 0xf0, 0x1f, 0xff, 0xff, 0xc0, 0x01, 0xfe, 0x0f, 0xe0, 0x00, 0x78, 0x3f,
    0xc1, 0xc1, 0xfe, 0x0f, 0x00, 0x00, 0x1c, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x78, 0x1c, 0xc0, 0xf0,
    0x3f, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0xc0, 0x00, 0x78, 0x3f, 0xc1, 0xc1, 0xfe, 0x0e, 0x00,
    0x00, 0x1c, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0x78, 0x0c, 0xe0, 0x78, 0x1f, 0xff, 0xff, 0xc1, 0xff,
    0xfe, 0x0f, 0x80, 0x00, 0x78, 0x3f, 0xc1, 0xc1, 0xfe, 0x0f, 0x00, 0x00, 0x1c, 0x1f, 0xff, 0xff,
    0xff, 0xc0, 0xf0, 0x3c, 0xf0, 0x3c, 0x07, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0x03, 0xf0, 0x78,
    0x3f, 0xc1, 0xc1, 0xfe, 0x0f, 0x00, 0x00, 0x1c, 0x1f, 0xff, 0xff, 0xff, 0x81, 0xe0, 0x7c, 0xf8,
    0x1f, 0x03, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0x07, 0xf0, 0x78, 0x3f, 0xc1, 0xc1, 0xfe, 0x0f,
    0x07, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xfe, 0x03, 0xc0, 0xfc, 0xfc, 0x0f, 0x81, 0xff, 0xff, 0xc1,
    0xff, 0xfe, 0x0f, 0x0f, 0xf0, 0x78, 0x7f, 0xc1, 0xc1, 0xfe, 0x0f, 0x07, 0xff, 0xfc, 0x1f, 0xff,
    0xff, 0xfc, 0x0f, 0x81, 0xfc, 0xfe, 0x07, 0xc1, 0xff, 0xff, 0xc1, 0xff, 0xff, 0x0f, 0x0f, 0xe0,
    0x78, 0x7f, 0xc1, 0xc1, 0xfe, 0x0f, 0x03, 0xfc, 0x7c, 0x1f, 0xff, 0xff, 0xfc, 0x1f, 0x03, 0xfc,
    0xff, 0x87, 0xe1, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0x07, 0xc0, 0x78, 0x3f, 0xc1, 0xc1, 0xfe,
    0x0f, 0x80, 0xf0, 0x3c, 0x1f, 0xff, 0xff, 0xfc, 0x3f, 0x07, 0xfc, 0xff, 0xc7, 0xf1, 0xff, 0xff,
    0xc1, 0xff, 0xfe, 0x0f, 0x00, 0x00, 0x78, 0x3f, 0xc1, 0xc1, 0xfe, 0x0f, 0x80, 0x00, 0x3c, 0x1f,
    0xff, 0xff, 0xfc, 0x7f, 0x1f, 0xfc, 0xff, 0xe7, 0xf9, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0x80,
    0x00, 0x78, 0x3f, 0xc1, 0xc1, 0xfe, 0x0f, 0xc0, 0x00, 0x3c, 0x1f, 0xff, 0xff, 0xfc, 0xff, 0x3f,
    0xfc, 0xff, 0xf7, 0xfd, 0xff, 0xff, 0xc1, 0xff, 0xfe, 0x0f, 0x80, 0x00, 0x78, 0x3f, 0xc1, 0xc1,
    0xfe, 0x0f, 0xe0, 0x00, 0x7c, 0x1f, 0xff, 0xff, 0xfd, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xc1, 0xff, 0xfe, 0x0f, 0xe0, 0x30, 0x78, 0x7f, 0xc1, 0xc1, 0xfe, 0x0f, 0xf8, 0x01, 0xfc,
    0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1232)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char *epd_bitmap_allArray[1] = {
    epd_bitmap_planner214x45};

#define ELINK_SS 5
#define ELINK_BUSY 4
#define ELINK_RESET 16
#define ELINK_DC 17

#define BUTTON_PIN 39

// FreeFonts from Adafruit_GFX
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeSansBold9pt7b.h>

#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>

#include "config.h"
#include "fetch.h"
#include "network.h"

GxIO_Class io(SPI, /*CS=5*/ ELINK_SS, /*DC=*/ELINK_DC, /*RST=*/ELINK_RESET);
GxEPD_Class display(io, /*RST=*/ELINK_RESET, /*BUSY=*/ELINK_BUSY);
SPIClass sdSPI(VSPI);

int
    startXcol1 = 12,
    startY = 70,
    lineHeight = 22;
int startXcol2 = startXcol1 + 54;

void setup()
{
    Serial.begin(115200);
    while (!Serial)
        continue;
    Serial.println();

    String appointmentJSON;


    appointmentJSON = setupNetwork();
    setupFetch();

    // JSON Deserialize
    StaticJsonDocument<512> doc;
    DeserializationError error = deserializeJson(doc, appointmentJSON);
    if (error)
    {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return;
    }

    display.init(); // enable diagnostic output on Serial

    display.setRotation(1);
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);
    display.setCursor(0, 0);

    display.fillScreen(GxEPD_WHITE);
    display.drawBitmap(epd_bitmap_planner214x45, display.width() / 2 - 214 / 2, 0, 214, 45, GxEPD_WHITE);
    display.drawLine(0, 45, display.width(), 45, GxEPD_BLACK);

    // Before
    display.setFont(&FreeSans9pt7b);
    display.setCursor(startXcol1, startY + lineHeight * 0);
    display.println(doc["previous"]["time"].as<String>());
    display.setCursor(startXcol2, startY + lineHeight * 0);
    display.println(doc["previous"]["title"].as<String>());

    // Current
    display.setFont(&FreeSansBold9pt7b);
    display.setCursor(startXcol1, startY + lineHeight * 1);
    display.println(doc["current"]["time"].as<String>());
    display.setCursor(startXcol2, startY + lineHeight * 1);
    display.println(doc["current"]["title"].as<String>());

    // Next
    display.setFont(&FreeSans9pt7b);
    display.setCursor(startXcol1, startY + lineHeight * 2);
    display.println(doc["next"]["time"].as<String>());
    display.setCursor(startXcol2, startY + lineHeight * 2);
    display.println(doc["next"]["title"].as<String>());

    display.update();

    // goto sleep
    esp_sleep_enable_ext0_wakeup((gpio_num_t)BUTTON_PIN, LOW);
    esp_deep_sleep_start();
}

void loop()
{
}
